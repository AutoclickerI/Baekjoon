(define (get l n)
  (cond ((= n 0) (car l))
        (else (get (cdr l) (- n 1)))))
(define (change l n)
  (cond ((= n 0) (cons 1 (cdr l)))
        (else (cons (car l) (change (cdr l) (- n 1))))))
(define (add n l)
  (let ((tmp (read)))
  (cond ((= n 0) 0)
        (else (+ (get l tmp) (add (- n 1) (change l tmp)))))))
(display (add (read) '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))